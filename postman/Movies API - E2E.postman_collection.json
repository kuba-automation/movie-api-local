{
	"info": {
		"_postman_id": "3c40d7c3-509d-44cc-b975-5dfe3bd601fb",
		"name": "Movies API - E2E",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30681839"
	},
	"item": [
		{
			"name": "CREATE movie Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json = pm.response.json();\r",
							"pm.test(\"Movie created\", () => pm.response.code === 201);\r",
							"pm.collectionVariables.set(\"movieID\", json.id);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"The Legacy\",\r\n    \"year\": 2024,\r\n    \"director\": \"Steve Hailton\",\r\n    \"genres\": [\r\n        \"Drama\",\r\n        \"Mystery\"\r\n    ],\r\n    \"rating\": 8.2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/movies",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "CREATE actor Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"actorID\", jsonData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"Anna\",\r\n  \"last_name\": \"Stone\",\r\n  \"movies\": [{{movieID}}]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/actors/",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"actors",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "CREATE review Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"reviewID\", jsonData.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"movie_id\": {{movieID}},\r\n  \"reviewer\": \"Mike\",\r\n  \"content\": \"Incredible story and acting.\",\r\n  \"rating\": 9,\r\n  \"date\": \"2025-04-29\"\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/reviews/",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"reviews",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Replace movie (PUT) Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"The Legacy Returns\",\r\n    \"year\": 2025,\r\n    \"director\": \"Michael Scott\",\r\n    \"genres\": [\r\n        \"Thriller\"\r\n    ],\r\n    \"rating\": 7.5\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/movies/{{movieID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"movies",
						"{{movieID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Replace actor (PATCH) Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Last name was updated\", function () {\r",
							"    pm.expect(jsonData.last_name).to.eql(\"Stewart\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"last_name\": \"Stewart\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/actors/{{actorID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"actors",
						"{{actorID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Replace review (PATCH) Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"newRating\", (Math.random() * 10).toFixed(1));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
							"\r",
							"pm.test(\"Rating updated\", () => {\r",
							"  pm.expect(jsonData.rating).to.eql(Number(pm.collectionVariables.get(\"newRating\")));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n  \"rating\": {{newRating}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/reviews/{{reviewID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"reviews",
						"{{reviewID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE review Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has no content\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/reviews/{{reviewID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"reviews",
						"{{reviewID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET deleted review Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains not found message\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.include(\"not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/reviews/{{reviewID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"reviews",
						"{{reviewID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE actor Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has no content\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/actors/{{actorID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"actors",
						"{{actorID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET deleted actor Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains not found message\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.include(\"not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/actors/{{actorID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"actors",
						"{{actorID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Movie Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has no content\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/movies/{{movieID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"movies",
						"{{movieID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET deleted movie Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Movie no longer exists\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains not found message\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.include(\"not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/movies/{{movieID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"movies",
						"{{movieID}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "my-secret-key",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "movieID",
			"value": ""
		},
		{
			"key": "actorID",
			"value": ""
		},
		{
			"key": "reviewID",
			"value": ""
		},
		{
			"key": "newRating",
			"value": ""
		}
	]
}