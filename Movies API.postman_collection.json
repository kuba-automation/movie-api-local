{
	"info": {
		"_postman_id": "aa5e8108-163a-4746-9bf8-3f999de96497",
		"name": "Movies API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30681839"
	},
	"item": [
		{
			"name": "Movies",
			"item": [
				{
					"name": "GET all movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Array is not empty\", function () {\r",
									"    pm.expect(pm.response.json().length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Each movie has required fields\", function () {\r",
									"    const movies = pm.response.json();\r",
									"    movies.forEach(movie => {\r",
									"        pm.expect(movie).to.have.property('id');\r",
									"        pm.expect(movie).to.have.property('title');\r",
									"        pm.expect(movie).to.have.property('year');\r",
									"        pm.expect(movie).to.have.property('director');\r",
									"        pm.expect(movie).to.have.property('genres');\r",
									"        pm.expect(movie).to.have.property('rating');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/movies",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET one movie by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Fields should have correct data\", function () {\r",
									"    var json = pm.response.json();\r",
									"    pm.expect(json.title).to.eql('Inception');\r",
									"    pm.expect(json.year).to.eql(2010);\r",
									"    pm.expect(json.director).to.eql('Christopher Nolan');\r",
									"    pm.expect(json.genres[0]).to.eql(\"Action\");\r",
									"    pm.expect(json.genres[1]).to.eql(\"Adventure\");\r",
									"    pm.expect(json.genres[2]).to.eql(\"Sci-Fi\");\r",
									"    pm.expect(json.rating).to.eql(8.8);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/movies/:id",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"movies",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has all required fields\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property('id');\r",
									"    pm.expect(json).to.have.property('title', 'Coming back home');\r",
									"    pm.expect(json).to.have.property('year', 1977);\r",
									"    pm.expect(json).to.have.property('director', 'John Ham');\r",
									"    pm.expect(json.genres).to.be.an('array').that.includes('Drama');\r",
									"    pm.expect(json.rating).to.eql(7.1);\r",
									"    \r",
									"    pm.collectionVariables.set(\"movieID\", json.id);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n        \"title\": \"Coming back home\",\r\n        \"year\": 1977,\r\n        \"director\": \"John Ham\",\r\n        \"genres\": [\r\n            \"Drama\",\r\n            \"Sci-Fi\"\r\n        ],\r\n        \"rating\": 7.1\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/movies",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET movie by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Movie ID is correct\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json.id).to.eql(pm.collectionVariables.get(\"movieID\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/movies/:id",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"movies",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{movieID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace movie (PUT)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Movie title\r",
									"pm.collectionVariables.set('movieTitle', pm.variables.replaceIn('{{$randomWords}}'));\r",
									"\r",
									"// Movie year\r",
									"pm.collectionVariables.set('movieYear', Math.floor(Math.random() * (2024 - 1950 + 1)) + 1950);\r",
									"\r",
									"// Director\r",
									"pm.collectionVariables.set('movieDirector', pm.variables.replaceIn('{{$randomFullName}}'));\r",
									"\r",
									"// Genre\r",
									"const genres = ['Action', 'Adventure', 'Drama', 'Comedy', 'Sci-Fi', 'Thriller', 'Fantasy'];\r",
									"const randomGenre = genres[Math.floor(Math.random() * genres.length)];\r",
									"pm.collectionVariables.set('movieGenre', randomGenre);\r",
									"\r",
									"// Rating\r",
									"pm.collectionVariables.set('movieRating', (Math.random() * 10).toFixed(1));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has updated fields\", function () {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get('movieTitle'));\r",
									"    pm.expect(jsonData.year).to.eql(Number(pm.collectionVariables.get('movieYear')));\r",
									"    pm.expect(jsonData.director).to.eql(pm.collectionVariables.get('movieDirector'));\r",
									"    pm.expect(jsonData.genres[0]).to.eql(pm.collectionVariables.get('movieGenre').replace(/\"/g, \"\"));\r",
									"    pm.expect(jsonData.rating).to.eql(Number(pm.collectionVariables.get('movieRating')));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{movieTitle}}\",\r\n    \"year\": {{movieYear}},\r\n    \"director\": \"{{movieDirector}}\",\r\n    \"genres\": [\"{{movieGenre}}\"],\r\n    \"rating\": {{movieRating}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/movies/{{movieID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"movies",
								"{{movieID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update movie (PATCH)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Rating\r",
									"pm.collectionVariables.set('movieRating', (Math.random() * 10).toFixed(1));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has all required fields\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"title\");\r",
									"    pm.expect(jsonData).to.have.property(\"year\");\r",
									"    pm.expect(jsonData).to.have.property(\"director\");\r",
									"    pm.expect(jsonData).to.have.property(\"genres\");\r",
									"    pm.expect(jsonData).to.have.property(\"rating\");\r",
									"});\r",
									"\r",
									"pm.test(\"Rating is a number between 0 and 10\", function () {\r",
									"    pm.expect(jsonData.rating).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.rating).to.be.within(0, 10);\r",
									"});\r",
									"\r",
									"pm.test(\"Rating field contains correct value\", function () {\r",
									"    pm.expect(jsonData.rating).to.eql(Number(pm.collectionVariables.get('movieRating')));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rating\": {{movieRating}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/movies/{{movieID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"movies",
								"{{movieID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has no content\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/movies/{{movieID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"movies",
								"{{movieID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET deleted movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Movie no longer exists\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains not found message\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/movies/{{movieID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"movies",
								"{{movieID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Actors",
			"item": [
				{
					"name": "GET all actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Array is not empty\", function () {\r",
									"    pm.expect(pm.response.json().length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Actor fields have correct data types\", function () {\r",
									"    const actors = pm.response.json();\r",
									"    actors.forEach(actor => {\r",
									"        pm.expect(actor.id).to.be.a('number');\r",
									"        pm.expect(actor.first_name).to.be.a('string');\r",
									"        pm.expect(actor.last_name).to.be.a('string');\r",
									"        pm.expect(actor.movies).to.be.an('array');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each actor has required fields\", function () {\r",
									"    const actors = pm.response.json();\r",
									"    actors.forEach(actor => {\r",
									"        pm.expect(actor).to.have.property('id');\r",
									"        pm.expect(actor).to.have.property('first_name');\r",
									"        pm.expect(actor).to.have.property('last_name');\r",
									"        pm.expect(actor).to.have.property('movies');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/actors",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET one actor by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Fields should have correct data\", function () {\r",
									"    var json = pm.response.json();\r",
									"    pm.expect(json.first_name).to.eql('Carrie-Anne');\r",
									"    pm.expect(json.last_name).to.eql('Moss');\r",
									"    pm.expect(json.movies[0]).to.eql(1);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/actors/:id",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"actors",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE actor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Random first and last name\r",
									"pm.collectionVariables.set('actorFirstName', pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.collectionVariables.set('actorLastName', pm.variables.replaceIn('{{$randomLastName}}'));\r",
									"\r",
									"// Random movieID from the existing DB of 10 movies\r",
									"const randomMovieID = Math.floor(Math.random() * 10) + 1;\r",
									"pm.collectionVariables.set('actorMovieID', randomMovieID);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains correct data\", function () {\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('first_name', pm.collectionVariables.get('actorFirstName'));\r",
									"    pm.expect(jsonData).to.have.property('last_name', pm.collectionVariables.get('actorLastName'));\r",
									"    pm.expect(jsonData.movies).to.include(Number(pm.collectionVariables.get('actorMovieID')));\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"actorID\", jsonData.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"{{actorFirstName}}\",\r\n    \"last_name\": \"{{actorLastName}}\",\r\n    \"movies\": [{{actorMovieID}}]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/actors/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"actors",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET actor by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Actor ID is correct\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json.id).to.eql(pm.collectionVariables.get(\"actorID\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/actors/{{actorID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"actors",
								"{{actorID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace actor (PUT)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"actorFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
									"pm.collectionVariables.set(\"actorLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));\r",
									"\r",
									"// Random movieID from the existing DB of 10 movies\r",
									"const randomMovieId = Math.floor(Math.random() * 10) + 1;\r",
									"pm.collectionVariables.set(\"movieID\", randomMovieId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Actor was updated\", function () {\r",
									"    pm.expect(jsonData.first_name).to.eql(pm.collectionVariables.get(\"actorFirstName\"));\r",
									"    pm.expect(jsonData.last_name).to.eql(pm.collectionVariables.get(\"actorLastName\"));\r",
									"    pm.expect(jsonData.movies).to.include(Number(pm.collectionVariables.get(\"movieID\")));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"{{actorFirstName}}\",\r\n  \"last_name\": \"{{actorLastName}}\",\r\n  \"movies\": [{{movieID}}]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/actors/{{actorID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"actors",
								"{{actorID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace actor (PATCH)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"actorLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Last name was updated\", function () {\r",
									"    pm.expect(jsonData.last_name).to.eql(pm.collectionVariables.get(\"actorLastName\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"last_name\": \"{{actorLastName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/actors/{{actorID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"actors",
								"{{actorID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE actor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has no content\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/actors/{{actorID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"actors",
								"{{actorID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET deleted actor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains not found message\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/actors/{{actorID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"actors",
								"{{actorID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reviews",
			"item": [
				{
					"name": "GET all reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Array is not empty\", function () {\r",
									"    pm.expect(pm.response.json().length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Review fields have correct data types\", function () {\r",
									"    const reviews = pm.response.json();\r",
									"    reviews.forEach(review => {\r",
									"        pm.expect(review.id).to.be.a('number');\r",
									"        pm.expect(review.movie_id).to.be.a('number');\r",
									"        pm.expect(review.reviewer).to.be.a('string');\r",
									"        pm.expect(review.content).to.be.an('string');\r",
									"        pm.expect(review.rating).to.be.an('number');\r",
									"        pm.expect(review.date).to.be.an('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Each actor has required fields\", function () {\r",
									"    const reviews = pm.response.json();\r",
									"    reviews.forEach(review => {\r",
									"        pm.expect(review).to.have.property('id');\r",
									"        pm.expect(review).to.have.property('movie_id');\r",
									"        pm.expect(review).to.have.property('reviewer');\r",
									"        pm.expect(review).to.have.property('content');\r",
									"        pm.expect(review).to.have.property('rating');\r",
									"        pm.expect(review).to.have.property('date');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/reviews",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET one review by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Fields should have correct data\", function () {\r",
									"    var json = pm.response.json();\r",
									"    pm.expect(json.id).to.eql(4);\r",
									"    pm.expect(json.movie_id).to.eql(3);\r",
									"    pm.expect(json.reviewer).to.eql('David');\r",
									"    pm.expect(json.content).to.eql('The perfect sequel, with unforgettable performances.');\r",
									"    pm.expect(json.rating).to.eql(10);\r",
									"    pm.expect(json.date).to.eql('2022-9-10');\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/reviews/:id",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"reviews",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE review",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Random reviewer name\r",
									"pm.collectionVariables.set('reviewerName', pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"\r",
									"// Random content\r",
									"const sentences = [\r",
									"  \"An unforgettable experience with stunning visuals.\",\r",
									"  \"Well-paced and emotionally impactful.\",\r",
									"  \"Could have been shorter, but overall great.\",\r",
									"  \"Mediocre plot, but excellent acting.\",\r",
									"  \"A truly captivating sequel.\"\r",
									"];\r",
									"const randomSentence = sentences[Math.floor(Math.random() * sentences.length)];\r",
									"pm.collectionVariables.set('reviewContent', randomSentence);\r",
									"\r",
									"// Rating 1–10\r",
									"pm.collectionVariables.set('reviewRating', Math.floor(Math.random() * 10) + 1);\r",
									"\r",
									"// Random date in YYYY-M-D format\r",
									"const year = Math.floor(Math.random() * (2024 - 2020 + 1)) + 2020;\r",
									"const month = Math.floor(Math.random() * 12) + 1;\r",
									"const day = Math.floor(Math.random() * 28) + 1;\r",
									"pm.collectionVariables.set('reviewDate', `${year}-${month}-${day}`);\r",
									"\r",
									"// Random movie ID (assuming 1–10 exist)\r",
									"pm.collectionVariables.set('reviewMovieId', Math.floor(Math.random() * 10) + 1);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains all required fields\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"movie_id\", Number(pm.collectionVariables.get(\"reviewMovieId\")));\r",
									"    pm.expect(jsonData).to.have.property(\"reviewer\", pm.collectionVariables.get(\"reviewerName\"));\r",
									"    pm.expect(jsonData).to.have.property(\"content\", pm.collectionVariables.get(\"reviewContent\"));\r",
									"    pm.expect(jsonData).to.have.property(\"rating\", Number(pm.collectionVariables.get(\"reviewRating\")));\r",
									"    pm.expect(jsonData).to.have.property(\"date\", pm.collectionVariables.get(\"reviewDate\"));\r",
									"});\r",
									"\r",
									"// Save the review ID for further testing\r",
									"pm.collectionVariables.set(\"reviewID\", jsonData.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"movie_id\": {{reviewMovieId}},\r\n  \"reviewer\": \"{{reviewerName}}\",\r\n  \"content\": \"{{reviewContent}}\",\r\n  \"rating\": {{reviewRating}},\r\n  \"date\": \"{{reviewDate}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/reviews/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"reviews",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET review by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Review ID is correct\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json.id).to.eql(pm.collectionVariables.get(\"reviewID\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/reviews/{{reviewID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"reviews",
								"{{reviewID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace review (PUT)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Random reviewer\r",
									"const reviewers = [\"Anna\", \"David\", \"Michael\", \"Sara\", \"John\"];\r",
									"pm.collectionVariables.set(\"reviewerName\", reviewers[Math.floor(Math.random() * reviewers.length)]);\r",
									"\r",
									"// Random content\r",
									"const contents = [\r",
									"  \"Absolutely phenomenal!\",\r",
									"  \"Good pacing and acting.\",\r",
									"  \"Expected more from the sequel.\",\r",
									"  \"Well-directed and moving.\",\r",
									"  \"Not my cup of tea.\"\r",
									"];\r",
									"pm.collectionVariables.set(\"reviewContent\", contents[Math.floor(Math.random() * contents.length)]);\r",
									"\r",
									"// Rating\r",
									"pm.collectionVariables.set(\"reviewRating\", (Math.random() * 10).toFixed(1));\r",
									"\r",
									"// Date (today)\r",
									"const today = new Date().toISOString().split(\"T\")[0];\r",
									"pm.collectionVariables.set(\"reviewDate\", today);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Fields updated\", () => {\r",
									"  pm.expect(jsonData.content).to.eql(pm.collectionVariables.get(\"reviewContent\"));\r",
									"  pm.expect(jsonData.reviewer).to.eql(pm.collectionVariables.get(\"reviewerName\"));\r",
									"  pm.expect(jsonData.rating).to.eql(Number(pm.collectionVariables.get(\"reviewRating\")));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"movie_id\": {{movieID}},\r\n  \"reviewer\": \"{{reviewerName}}\",\r\n  \"content\": \"{{reviewContent}}\",\r\n  \"rating\": {{reviewRating}},\r\n  \"date\": \"{{reviewDate}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/reviews/{{reviewID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"reviews",
								"{{reviewID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace review (PATCH)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"reviewRating\", (Math.random() * 10).toFixed(1));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
									"pm.test(\"Rating updated\", () => {\r",
									"  pm.expect(jsonData.rating).to.eql(Number(pm.collectionVariables.get(\"reviewRating\")));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rating\": {{reviewRating}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/reviews/{{reviewID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"reviews",
								"{{reviewID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE review",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has no content\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/reviews/{{reviewID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"reviews",
								"{{reviewID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET deleted review",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains not found message\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/reviews/{{reviewID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"reviews",
								"{{reviewID}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			},
			{
				"key": "value",
				"value": "my-secret-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "movieID",
			"value": ""
		},
		{
			"key": "movieTitle",
			"value": ""
		},
		{
			"key": "movieYear",
			"value": ""
		},
		{
			"key": "movieDirector",
			"value": ""
		},
		{
			"key": "movieGenres",
			"value": ""
		},
		{
			"key": "movieRating",
			"value": ""
		},
		{
			"key": "movieGenre",
			"value": ""
		},
		{
			"key": "actorFirstName",
			"value": ""
		},
		{
			"key": "actorLastName",
			"value": ""
		},
		{
			"key": "actorMovieID",
			"value": ""
		},
		{
			"key": "actorID",
			"value": ""
		},
		{
			"key": "reviewerName",
			"value": ""
		},
		{
			"key": "reviewContent",
			"value": ""
		},
		{
			"key": "reviewRating",
			"value": ""
		},
		{
			"key": "reviewDate",
			"value": ""
		},
		{
			"key": "reviewMovieId",
			"value": ""
		},
		{
			"key": "reviewID",
			"value": ""
		}
	]
}